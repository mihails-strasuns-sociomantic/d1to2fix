/******************************************************************************

    Custom dparse visitor class iterates resulting AST and creates
    mappings between language constructs that need to be converted and token
    indexes in the original lexed array.

    Copyright: Copyright (c) 2016 Sociomantic Labs. All rights reserved

    License: Boost Software License Version 1.0 (see LICENSE for details)

******************************************************************************/

module d1to2fix.visitor;

import dparse.parser;
import dparse.lexer;
import dparse.ast;

/**
    Aggregates all necessary data generated by TokenMappingVisitor that will
    be used from other modules.
 **/
public struct TokenMappings
{
    import util.intervals;

    OrderedIntervals test_blocks;
}

/**
    Custom ASTVisitor

    Combines generation of several unrelated mappings at once for performance
    reasons (to avoid multiple redundant visiting of same AST).
 **/
public final class TokenMappingVisitor : ASTVisitor
{
    private
    {
        const Token[] tokens;
        string fileName;

        TokenMappings token_mappings;
    }

    public this (const Token[] toks, string file)
    {
        this.tokens = toks;
        this.fileName = file;
    }

    public auto foundTokenMappings ( )
    {
        return this.token_mappings;
    }

    // Introduces base class `visit`
    public alias visit = super.visit;

    public override void visit (const Unittest node)
    {
        this.token_mappings.test_blocks.add(
            node.blockStatement.startLocation,
            node.blockStatement.endLocation
        );

        super.visit(node);
    }
}
